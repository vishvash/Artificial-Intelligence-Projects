# -*- coding: utf-8 -*-
"""XAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jX0EEQDag9sXNqVzMINzsML7kXDX6pd3
"""

import pandas as pd
from matplotlib import pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

df = pd.read_csv('/content/drive/MyDrive/XAI/D1.csv')

print (df)
# KNN classification labels
X = df.loc[:,'colored_sputum':'headache']
Y = df.loc[:,'class']

# Trains the model
knn = KNeighborsClassifier()
knn.fit(X,Y)

# Plotting the relation of each feature with each class
figure,(sub1,sub2,sub3,sub4)=plt.subplots(4,sharex=True,sharey=True)
plt.suptitle('k-nearest neighbors')
plt.xlabel('Feature')
plt.ylabel('Class') 
X = df.loc[:,'colored_sputum']
Y = df.loc[:,'class']
sub1.scatter(X, Y,color='blue',label='colored_sputum')
sub1.legend(loc=4, prop={'size': 5})
sub1.set_title('Medical Diagnosis Software')
X = df.loc[:,'cough']
Y = df.loc[:,'class']
sub2.scatter(X, Y,color='green',label='cough')
sub2.legend(loc=4, prop={'size': 5})
X = df.loc[:,'fever']
Y = df.loc[:,'class']
sub3.scatter(X, Y,color='red',label='fever')
sub3.legend(loc=4, prop={'size': 5})
X = df.loc[:,'headache']
Y = df.loc[:,'class']
sub4.scatter(X, Y,color='black',label='headache')
sub4.legend(loc=4, prop={'size': 5})
figure.subplots_adjust(hspace=0)
plt.show()

colored_sputum = 1
cough = 3
fever = 7
headache = 5

# colored_sputum,cough,fever,headache
cs=colored_sputum;c=cough;f=fever;h=headache;
X_DL = [[cs,c,f,h]] 
prediction = knn.predict(X_DL)
print ("The prediction is:",str(prediction).strip('[]'))

!apt install proj-bin libproj-dev libgeos-dev

!pip install https://github.com/matplotlib/basemap/archive/v1.1.0.tar.gz

!pip install -U git+https://github.com/matplotlib/basemap.git

import pandas as pd
import numpy as np
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
from datetime import datetime as dt

df_gps = pd.read_json('/content/drive/MyDrive/XAI/Location_History.json')
print('There are {:,} rows in the location history dataset'.format(len(df_gps)))

df_gps['lat'] = df_gps['locations'].map(lambda x: x['latitudeE7'])
df_gps['lon'] = df_gps['locations'].map(lambda x: x['longitudeE7'])
df_gps['timestamp_ms'] = df_gps['locations'].map(lambda x: x['timestampMs'])

print(df_gps)

df_gps['lat'] = df_gps['lat'] / 10.**7
df_gps['lon'] = df_gps['lon'] / 10.**7
df_gps['timestamp_ms'] = df_gps['timestamp_ms'].astype(float) / 1000
df_gps['datetime'] = df_gps['timestamp_ms'].map(lambda x: dt.fromtimestamp(x).strftime('%Y-%m-%d %H:%M:%S'))
date_range = '{}-{}'.format(df_gps['datetime'].min()[:4], df_gps['datetime'].max()[:4])

df_gps = df_gps.drop(labels=['locations', 'timestamp_ms'], axis=1, inplace=False)
df_gps[1000:1005]

land_color = '#f5f5f3'
water_color = '#cdd2d4'
coastline_color = '#f5f5f3'
border_color = '#bbbbbb'
meridian_color = '#f5f5f3'
marker_fill_color = '#cc3300'
marker_edge_color = 'None'

# creating the plot
fig = plt.figure(figsize=(20, 10))
ax = fig.add_subplot(111, facecolor='#ffffff', frame_on=False)
ax.set_title('Google Location History, {}'.format(date_range), fontsize=24, color='#333333')

#drawing the basemap and its features
m = Basemap(projection='kav7', lon_0=0, resolution='c', area_thresh=10000)
m.drawmapboundary(color=border_color, fill_color=water_color)
m.drawcoastlines(color=coastline_color)
m.drawcountries(color=border_color)
m.fillcontinents(color=land_color, lake_color=water_color)
m.drawparallels(np.arange(-90., 120., 30.), color=meridian_color)
m.drawmeridians(np.arange(0., 420., 60.), color=meridian_color)

# projecting the location history points and then scatter plotting them
x, y = m(df_gps['lon'].values, df_gps['lat'].values)
m.scatter(x, y, s=8, color=marker_fill_color, edgecolor=marker_edge_color, alpha=1, zorder=3)

# showing the map
plt.show()

lon=1;lat=50
map_width_m = 1000 * 1000
map_height_m = 1200 * 1000
target_crs = {'datum':'WGS84',
              'ellps':'WGS84',
              'proj':'tmerc',
              'lon_0':1,
              'lat_0':50.5}

fig_width = 6
fig = plt.figure(figsize=[fig_width, fig_width * map_height_m / float(map_width_m)])
ax = fig.add_subplot(111, facecolor='#ffffff', frame_on=False)
ax.set_title('Customized Map, {}'.format(date_range), fontsize=16, color='#333333')

m = Basemap(ellps=target_crs['ellps'],
            projection=target_crs['proj'],
            lon_0=target_crs['lon_0'], 
            lat_0=target_crs['lat_0'],
            width=map_width_m, 
            height=map_height_m,
            resolution='l',
            area_thresh=10000)

m.drawcoastlines(color=coastline_color)
m.drawcountries(color=border_color)
m.fillcontinents(color=land_color, lake_color=water_color)
m.drawstates(color=border_color)
m.drawmapboundary(fill_color=water_color)

x, y = m(df_gps['lon'].values, df_gps['lat'].values)
m.scatter(x, y, s=5, color=marker_fill_color, edgecolor=marker_edge_color, alpha=0.6, zorder=3)
plt.show()

import pandas as pd
from matplotlib import pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
import os

df = pd.read_csv('/content/drive/MyDrive/XAI/DLH.csv')
print (df)

# KNN classification labels
X = df.loc[:,'colored_sputum':'chicago']
Y = df.loc[:,'class']

# Trains the model
knn = KNeighborsClassifier()
knn.fit(X,Y)

colored_sputum =  1#@param {type:"integer"}
cough=3#@param {type:"integer"}
fever=7#@param {type:"integer"}
headache=7#@param {type:"integer"}
days=5#@param {type:"integer"}
# Insert the function here that analyzes the conjunction of
# the Location History of the patient and location of
# diseases per country/location 
france=0#@param {type:"integer"}
chicago=1#@param {type:"integer"}

# colored_sputum,cough,fever,headache
cs=colored_sputum; c=cough; f=fever; h=headache; d=days; fr=france; ch=chicago;
X_DL = [[cs,c,f,h,d,fr,ch]] 

prediction = knn.predict(X_DL)
predictv=str(prediction).strip('[]')
print ("The prediction is:",predictv)

alert = "bad_flu"
if alert == "bad_flu":
    print("Further urgent information might be required. Activate the XAI interface.")

figure,(sub1,sub2,sub3,sub4,sub5)=plt.subplots(5,sharex=True,sharey=True)
plt.suptitle('k-nearest neighbors')
plt.xlabel('Feature')
plt.ylabel('Class') 

X = df.loc[:,'colored_sputum']
Y = df.loc[:,'class']
sub1.scatter(X, Y,color='blue',label='colored_sputum')
sub1.legend(loc=4, prop={'size': 5})
sub1.set_title('Medical Diagnosis Software')

X = df.loc[:,'cough']
Y = df.loc[:,'class']
sub2.scatter(X, Y,color='green',label='cough')
sub2.legend(loc=4, prop={'size': 5})

X = df.loc[:,'fever']
Y = df.loc[:,'class']
sub3.scatter(X, Y,color='red',label='fever')
sub3.legend(loc=4, prop={'size': 5})

X = df.loc[:,'headache']
Y = df.loc[:,'class']
sub4.scatter(X, Y,color='black',label='headache')
sub4.legend(loc=4, prop={'size': 5})


X = df.loc[:,'days']
Y = df.loc[:,'class']
sub5.scatter(X, Y,color='brown',label='days')
sub5.legend(loc=4, prop={'size': 5})

figure.subplots_adjust(hspace=0)
plt.show()

if(f>5):
  print("your patient has a high fever")
if(d>4):
  print("your patient has had a high fever for more than 4 days even with medication")
if(fr<1):
  print("it is probable that your patient was not in contact with a virus in France")
if(chicago>0):
  print("it is probable that your patient was in contact with a virus in Chicago")
  
print("Your patient is part of the XAI program that you have signed up for.")
print("As such, we have your patient's authorization to access his Google Location History which we update in our database once a day between 10 pm and 6 am.")
print("The following map shows that your patient was in Chicago, Paris, and Lyon within the past 3 weeks")
print("For this diagnosis, we only activated a search for the past 3 weeks")
print("Please ask your patient if he was in Chicago in the past 3 weeks. If the answer is yes, continue the AI explanation.")

import matplotlib.image as mpimg
img=mpimg.imread('/content/drive/MyDrive/XAI/glh.jpg')
imgplot = plt.imshow(img)
plt.show()

print("Your patient was in Chicago in the period during which there were positive detections of the CULEX PIPIENS/RESTUANS mosquito.")
print("The mosquitos were trapped with a Gravid trap.")
print("The CULEX PIPIENS/RESTUANS mosquito is a vector for the West Nile virus.")
print("We matched your patient's location history with the presence of the CULEX PIPIENS/RESTUANS in Chicago.")
print("We then matched the CULEX PIPIENS/RESTUANS with West Nile virus.")
print("Continue to see information the West Nile virus.")